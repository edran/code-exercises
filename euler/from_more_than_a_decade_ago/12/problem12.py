#Problem 12 ------------------------------------------------------------------------------------
#The sequence of triangle numbers is generated by adding the natural numbers.
#So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?

import math
TOP = 500 #max divisors
DEBUG = False

def numberOfDivisors(n): #return the number
    #if DEBUG:
    #    print 'Checking the divisors of ', n
    i = 1
    sum_divisors = 0
    r = int(math.ceil(math.sqrt(n)))
    if DEBUG:
        print 'r = ', r
    while i <= r:
        if n % i == 0:
            sum_divisors += 2
        i += 1
    if DEBUG:
        print sum_divisors
    return sum_divisors
            
    
i = 1  #index of the triangle
ndivisor = 0
while ndivisor <= TOP:
    triangle = 0
    #generate the triangle
    for n in range(1,i+1):
        triangle = triangle + n
        #check the divisors
    if DEBUG:
        print 'T = ', triangle
    ndivisor = numberOfDivisors(triangle)
    i += 1
print 'The triangle number to have over ', TOP, ' divisors is ', triangle



        
    
    
